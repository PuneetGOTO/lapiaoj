import discord
from discord.ext import commands
from discord import app_commands # For slash commands
import os
import asyncio
from dotenv import load_dotenv
import traceback # Import traceback for better error logging

# --- Configuration ---
load_dotenv() # Load variables from .env file for local testing (optional)

# Get configuration from environment variables (Essential for Railway)
BOT_TOKEN = os.getenv("DISCORD_BOT_TOKEN")
SUPPORT_ROLE_ID_STR = os.getenv("SUPPORT_ROLE_ID")
TICKET_CATEGORY_ID_STR = os.getenv("TICKET_CATEGORY_ID") # Category for ACTUAL tickets
LOG_CHANNEL_ID_STR = os.getenv("LOG_CHANNEL_ID") # Optional log channel
# NEW: Category for the private channels created for new members
NEW_MEMBER_CATEGORY_ID_STR = os.getenv("NEW_MEMBER_CATEGORY_ID")

# --- Validate Configuration ---
CONFIG_ERROR = False
if not BOT_TOKEN: print("ERROR: DISCORD_BOT_TOKEN missing."); CONFIG_ERROR = True
if not SUPPORT_ROLE_ID_STR: print("ERROR: SUPPORT_ROLE_ID missing."); CONFIG_ERROR = True
if not TICKET_CATEGORY_ID_STR: print("ERROR: TICKET_CATEGORY_ID missing."); CONFIG_ERROR = True
# NEW: Validate the new member category ID
if not NEW_MEMBER_CATEGORY_ID_STR: print("ERROR: NEW_MEMBER_CATEGORY_ID missing. Cannot create welcome channels."); CONFIG_ERROR = True


SUPPORT_ROLE_ID = None
TICKET_CATEGORY_ID = None
LOG_CHANNEL_ID = None # Will be set by command or optional env var
NEW_MEMBER_CATEGORY_ID = None # NEW
try:
    if SUPPORT_ROLE_ID_STR: SUPPORT_ROLE_ID = int(SUPPORT_ROLE_ID_STR)
    if TICKET_CATEGORY_ID_STR: TICKET_CATEGORY_ID = int(TICKET_CATEGORY_ID_STR)
    if LOG_CHANNEL_ID_STR:
        try:
            LOG_CHANNEL_ID = int(LOG_CHANNEL_ID_STR)
        except ValueError:
            print(f"WARNING: LOG_CHANNEL_ID environment variable ('{LOG_CHANNEL_ID_STR}') is not a valid integer. Log channel must be set via command.")
            LOG_CHANNEL_ID = None # Ensure it's None if invalid
    # NEW: Parse the new member category ID
    if NEW_MEMBER_CATEGORY_ID_STR:
        try:
            NEW_MEMBER_CATEGORY_ID = int(NEW_MEMBER_CATEGORY_ID_STR)
        except ValueError:
            print(f"ERROR: NEW_MEMBER_CATEGORY_ID ('{NEW_MEMBER_CATEGORY_ID_STR}') is not a valid integer.")
            CONFIG_ERROR = True # Make this error critical

except ValueError:
    # This catches errors if SUPPORT_ROLE_ID or TICKET_CATEGORY_ID are invalid integers
    print("ERROR: SUPPORT_ROLE_ID or TICKET_CATEGORY_ID environment variable is not a valid integer.")
    CONFIG_ERROR = True # Ensure bot exits if core IDs are invalid

if CONFIG_ERROR:
    exit("Exiting due to configuration errors.")

# --- Bot Setup ---
# IMPORTANT: Enable Members Intent!
intents = discord.Intents.default()
intents.guilds = True
intents.members = True # <<<=== REQUIRED FOR on_member_join

bot = commands.Bot(command_prefix="!", intents=intents) # Prefix needed for Bot class, but we use slash commands

# --- In-Memory Storage ---
# WARNING: This data is lost on bot restart!
ticket_data_cache = {}

# Store the log channel ID (can be updated by command)
# Initialize with value from env var if provided and valid
bot.log_channel_id = LOG_CHANNEL_ID

# --- Modal Definition ---
class InfoModal(discord.ui.Modal, title='ËØ∑Êèê‰æõÂøÖË¶Å‰ø°ÊÅØ‰ª•Â§ÑÁêÜÊÇ®ÁöÑËØ∑Ê±Ç'):
    identifier = discord.ui.TextInput(
        label='ËßíËâ≤ID Êàñ ‰∏™‰∫∫ËµÑÊñôÈìæÊé• (Áî®‰∫éË∫´‰ªΩÁ°ÆËÆ§)',
        style=discord.TextStyle.short,
        placeholder='ËØ∑Êèê‰æõÁõ∏ÂÖ≥IDÊàñÈìæÊé•',
        required=True,
        max_length=150
    )
    reason = discord.ui.TextInput(
        label='ËØ∑ËØ¥ÊòéÊù•ÊÑè (Reason for contact)',
        style=discord.TextStyle.paragraph,
        placeholder='‰æãÂ¶ÇÔºöÁî≥ËØ∑GJÊ≠£ÂºèÊàêÂëò/GJZÁ≤æËã±ÈÉ®Èòü/GJKÂâçÈãíÈÉ®Èòü/Âêà‰Ωú/ÊàñÂÖ∂‰ªñ...',
        required=True,
        max_length=1000
    )
    kill_count = discord.ui.TextInput(
        label='(Â¶ÇÊûúÈÄÇÁî®) ‰Ω†Â§ßÊ¶ÇÂ§öÂ∞ëÊùÄÔºü',
        style=discord.TextStyle.short,
        placeholder='‰æãÂ¶ÇÔºö50+ (Ëã•‰∏çÈÄÇÁî®ÂèØÂ°´ N/A)',
        required=False, # Optional
        max_length=50
    )
    notes = discord.ui.TextInput(
        label='ÂÖ∂‰ªñË°•ÂÖÖËØ¥Êòé (Optional Notes)',
        style=discord.TextStyle.paragraph,
        placeholder='‰ªª‰ΩïÂÖ∂‰ªñÈúÄË¶ÅËÆ©ÂÆ¢ÊúçÁü•ÈÅìÁöÑ‰ø°ÊÅØ...',
        required=False,
        max_length=500
    )

    async def on_submit(self, interaction: discord.Interaction):
        user = interaction.user
        channel_id = interaction.channel_id

        # Store the submitted data in the cache
        submitted_data = {
            "user_id": user.id,
            "user_mention": user.mention,
            "user_name": str(user),
            "identifier": self.identifier.value,
            "reason": self.reason.value,
            "kill_count": self.kill_count.value if self.kill_count.value else "N/A",
            "notes": self.notes.value if self.notes.value else "Êó†",
            "channel_name": interaction.channel.name,
            "channel_mention": interaction.channel.mention, # Store mention for logging
            "submission_time": discord.utils.utcnow()
        }
        ticket_data_cache[channel_id] = submitted_data
        print(f"Stored data for ticket channel {channel_id}")

        # Send confirmation embed in the ticket channel
        confirm_embed = discord.Embed(
            title="üìÑ ‰ø°ÊÅØÂ∑≤Êèê‰∫§ÔºåÁ≠âÂæÖÂÆ¢ÊúçÂÆ°Ê†∏",
            description=(
                f"ÊÑüË∞¢ {user.mention} Êèê‰æõ‰ø°ÊÅØÔºÅ\n"
                f"ÂÆ¢Êúç‰∫∫Âëò <@&{SUPPORT_ROLE_ID}> Â∞Ü‰ºöÂÆ°Ê†∏ÊÇ®ÁöÑËØ∑Ê±Ç„ÄÇ\n\n"
                "**ËØ∑ËÄêÂøÉÁ≠âÂæÖÔºåÂÆ¢Êúç‰∫∫ÂëòÂÆ°Ê†∏ÂÆåÊØïÂêé‰ºöÂú®Ê≠§È¢ëÈÅìËøõË°åÁ°ÆËÆ§„ÄÇ**"
            ),
            color=discord.Color.orange()
        )
        confirm_embed.add_field(name="Ë∫´‰ªΩÊ†áËØÜ (‰æõÂèÇËÄÉ)", value=self.identifier.value, inline=False)
        confirm_embed.add_field(name="Êù•ÊÑèËØ¥Êòé (‰æõÂèÇËÄÉ)", value=self.reason.value, inline=False)
        confirm_embed.set_footer(text=f"Ticket: {interaction.channel.name} | Status: Pending Verification")

        await interaction.channel.send(embed=confirm_embed)
        await interaction.response.send_message("‚úÖ ‰Ω†ÁöÑ‰ø°ÊÅØÂ∑≤Êèê‰∫§ÔºåËØ∑Á≠âÂæÖÂÆ¢ÊúçÂÆ°Ê†∏„ÄÇ", ephemeral=True, delete_after=20)

    async def on_error(self, interaction: discord.Interaction, error: Exception) -> None:
        print(f"Error in InfoModal submission: {error}")
        traceback.print_exc()
        await interaction.response.send_message('Êèê‰∫§‰ø°ÊÅØÊó∂ÂèëÁîüÈîôËØØÔºåËØ∑Á®çÂêéÈáçËØïÊàñËÅîÁ≥ªÁÆ°ÁêÜÂëò„ÄÇ', ephemeral=True)


# --- View Definition ---
class InfoButtonView(discord.ui.View):
    def __init__(self, *, timeout=300): # Increased timeout
        super().__init__(timeout=timeout)
        self.message = None

    @discord.ui.button(label="üìù Êèê‰æõ‰ø°ÊÅØ (Provide Info)", style=discord.ButtonStyle.primary, custom_id="provide_ticket_info_v2")
    async def provide_info_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = InfoModal()
        await interaction.response.send_modal(modal)

    async def on_timeout(self):
        print(f"InfoButtonView for message {self.message.id if self.message else 'Unknown'} timed out.")
        self.provide_info_button.disabled = True
        if self.message:
            try: await self.message.edit(content="*Ê≠§‰ø°ÊÅØÊî∂ÈõÜÊåâÈíÆÂ∑≤ËøáÊúü„ÄÇ*", view=self)
            except Exception as e: print(f"Error editing message on view timeout: {e}")
        self.stop()


# --- Bot Events ---
@bot.event
async def on_ready():
    print(f'Bot logged in as {bot.user}')
    print(f'Monitoring Ticket Category ID: {TICKET_CATEGORY_ID}')
    print(f'Support Role ID: {SUPPORT_ROLE_ID}')
    if bot.log_channel_id:
        print(f'Logging Channel ID: {bot.log_channel_id}')
    else:
        print('Logging Channel not set. Use /setlogchannel command.')
    # NEW: Print new member category
    if NEW_MEMBER_CATEGORY_ID:
        print(f'New Member Welcome Category ID: {NEW_MEMBER_CATEGORY_ID}')
    else:
        # This case should be caught by validation now, but good for clarity
        print('ERROR: New Member Welcome Category ID not set/invalid. Welcome channel feature disabled.')

    try:
        synced = await bot.tree.sync()
        print(f"Synced {len(synced)} slash command(s).")
    except Exception as e:
        print(f"Error syncing slash commands: {e}")
        traceback.print_exc()
    try:
        await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name="new members & tickets"))
        print("Set bot presence successfully.")
    except Exception as e:
        print(f"Warning: Could not set bot presence - {e}")

    print('------ Bot is Ready ------')

@bot.event
async def on_guild_channel_create(channel):
    """Handle new channel creation for ACTUAL tickets (from Ticket Tool)."""
    if not isinstance(channel, discord.TextChannel): return
    # Check against ACTUAL ticket category ID
    if channel.category_id != TICKET_CATEGORY_ID: return

    print(f"Detected potential ticket channel: #{channel.name} (ID: {channel.id})")
    await asyncio.sleep(1)
    guild = channel.guild
    support_role = guild.get_role(SUPPORT_ROLE_ID)
    if not support_role:
        print(f"ERROR: Support Role ID {SUPPORT_ROLE_ID} not found.")
        # Maybe send a message to the channel if possible?
        try: await channel.send(f"‚ö†Ô∏è **ÈÖçÁΩÆÈîôËØØ:** Êú™ÊâæÂà∞ÂÆ¢ÊúçËßíËâ≤ (ID: {SUPPORT_ROLE_ID})„ÄÇ")
        except discord.Forbidden: pass
        return # Don't proceed if support role isn't found

    try:
        # Apply permissions for support role
        overwrite = discord.PermissionOverwrite(view_channel=True, send_messages=True, read_message_history=True, embed_links=True, attach_files=True, manage_messages=True)
        await channel.set_permissions(support_role, overwrite=overwrite, reason="Auto-adding support role to ticket")
        print(f"Applied permissions for role '{support_role.name}' to ticket #{channel.name}")

        # Send the message with the info collection button
        initial_message_text = f"Ê¨¢ËøéÔºÅË¥üË¥£‰∫∫ <@&{SUPPORT_ROLE_ID}> Â∑≤Â∞±Áª™„ÄÇ\n**ËØ∑ÁÇπÂáª‰∏ãÊñπÊåâÈíÆÊèê‰æõÂøÖË¶Å‰ø°ÊÅØ‰ª•ÂºÄÂßãÂ§ÑÁêÜÊÇ®ÁöÑËØ∑Ê±ÇÔºö**"
        view = InfoButtonView()
        sent_message = await channel.send(initial_message_text, view=view)
        view.message = sent_message # Store message ref for timeout handling
        print(f"Sent initial message ({sent_message.id}) with info button to ticket #{channel.name}")

    except discord.errors.Forbidden:
        print(f"ERROR: Bot lacks permissions (Manage Roles/Send Messages?) in ticket channel #{channel.name}.")
        try: await channel.send(f"‚ö†Ô∏è **ÊùÉÈôêÈîôËØØ:** Êú∫Âô®‰∫∫Êó†Ê≥ïËÆæÁΩÆÊùÉÈôêÊàñÂèëÈÄÅÊ∂àÊÅØ„ÄÇ")
        except discord.Forbidden: pass
    except Exception as e:
        print(f"ERROR in on_guild_channel_create: {e}")
        traceback.print_exc()


# --- NEW: Event handler for new members joining ---
@bot.event
async def on_member_join(member: discord.Member):
    """Handles new members joining the server."""
    # Ensure NEW_MEMBER_CATEGORY_ID is loaded and valid
    if not NEW_MEMBER_CATEGORY_ID:
        print(f"Member {member.name} joined, but NEW_MEMBER_CATEGORY_ID is not configured. Skipping welcome channel.")
        return

    guild = member.guild
    support_role = guild.get_role(SUPPORT_ROLE_ID)
    welcome_category = guild.get_channel(NEW_MEMBER_CATEGORY_ID)

    # Double check components before proceeding
    if not support_role:
        print(f"ERROR: Support Role {SUPPORT_ROLE_ID} not found. Cannot create welcome channel for {member.name}.")
        return
    if not welcome_category or not isinstance(welcome_category, discord.CategoryChannel):
        print(f"ERROR: New Member Category {NEW_MEMBER_CATEGORY_ID} not found or isn't a category. Cannot create welcome channel for {member.name}.")
        return

    print(f"New member joined: {member.name} ({member.id}). Attempting to create welcome channel...")

    # Permissions for the private welcome channel
    overwrites = {
        guild.default_role: discord.PermissionOverwrite(view_channel=False), # Hide from @everyone
        member: discord.PermissionOverwrite(view_channel=True, send_messages=True, read_message_history=True, embed_links=True, attach_files=True), # Allow member
        guild.me: discord.PermissionOverwrite(view_channel=True, send_messages=True, manage_channels=True, manage_permissions=True), # Allow bot
        support_role: discord.PermissionOverwrite(view_channel=True, send_messages=True, read_message_history=True) # Allow support
    }

    # Sanitize member name for channel name (basic example)
    safe_name = "".join(c for c in member.name if c.isalnum() or c in ['-', '_']).lower() or "member"
    channel_name = f"welcome-{safe_name[:80]}" # Limit length

    try:
        welcome_channel = await guild.create_text_channel(
            name=channel_name,
            category=welcome_category,
            overwrites=overwrites,
            topic=f"ÂºïÂØºÊñ∞ÊàêÂëò {member.display_name} ËøõË°åÈ™åËØÅ | Welcome channel for {member.display_name}",
            reason=f"Ëá™Âä®‰∏∫Êñ∞ÊàêÂëò {member.name} ÂàõÂª∫ÂºïÂØºÈ¢ëÈÅì"
        )
        print(f"Successfully created welcome channel #{welcome_channel.name} (ID: {welcome_channel.id}) for {member.name}")
    except discord.Forbidden:
        print(f"ERROR: Bot lacks permissions (Manage Channels/Roles?) to create welcome channel for {member.name} in category {NEW_MEMBER_CATEGORY_ID}.")
        # Consider logging this to a specific admin/log channel if possible
        return
    except Exception as e:
        print(f"ERROR: Failed to create welcome channel for {member.name}: {e}")
        traceback.print_exc()
        return

    # Send the guidance message
    try:
        # --- !!! IMPORTANT: EDIT THE CHANNEL NAME BELOW !!! ---
        ticket_panel_channel_name = "#È¢ëÈÅìÂêç-ÂÆ¢Êúç‰∏≠ÂøÉÈ™åËØÅ" # <<<=== REPLACE THIS WITH YOUR ACTUAL TICKET PANEL CHANNEL NAME!!!
        # --- !!! IMPORTANT: EDIT THE CHANNEL NAME ABOVE !!! ---

        guidance_message = (
            f"Ê¨¢Ëøé {member.mention} Âä†ÂÖ• **{guild.name}**ÔºÅüéâ\n\n"
            f"‰∏∫‰∫ÜÁ°Æ‰øùÊúçÂä°Âô®ÁéØÂ¢ÉÂíåÊàêÂëòÊùÉÁõäÔºåÊàë‰ª¨ÈúÄË¶ÅÊÇ®ÂÖàÂÆåÊàêË∫´‰ªΩÈ™åËØÅ„ÄÇ\n\n"
            f"‚û°Ô∏è **ËØ∑ÂâçÂæÄ `{ticket_panel_channel_name}` È¢ëÈÅìÔºåÁÇπÂáªÈÇ£ÈáåÁöÑ 'Create Ticket' ÊåâÈíÆÊù•ÂºÄÂßãÊ≠£ÂºèÁöÑÈ™åËØÅÊµÅÁ®ã„ÄÇ**\n\n"
            f"Êàë‰ª¨ÁöÑÂÆ¢ÊúçÂõ¢Èòü <@&{SUPPORT_ROLE_ID}> Â∑≤ÁªèÊî∂Âà∞ÈÄöÁü•Ôºå‰ºöÂ∞ΩÂø´ÂçèÂä©ÊÇ®ÂÆåÊàêÈ™åËØÅ„ÄÇ\n"
            f"Â¶ÇÊûúÂú® `{ticket_panel_channel_name}` ÈÅáÂà∞ÈóÆÈ¢òÔºåÊÇ®ÂèØ‰ª•Âú®Ê≠§È¢ëÈÅìÁÆÄÂçïËØ¥ÊòéÔºåÂÆ¢Êúç‰∫∫Âëò‰ºöÁúãÂà∞„ÄÇ"
        )

        await welcome_channel.send(guidance_message)
        print(f"Sent welcome message to #{welcome_channel.name} for {member.name}")

    except discord.Forbidden:
        print(f"ERROR: Bot lacks permission to send messages in the created welcome channel #{welcome_channel.name}.")
    except Exception as e:
        print(f"ERROR: Failed to send welcome message for {member.name}: {e}")
        traceback.print_exc()


# --- Slash Commands ---
# Command: /setlogchannel
@bot.tree.command(name="setlogchannel", description="ËÆæÁΩÆÁî®‰∫éËÆ∞ÂΩïÂ∑≤È™åËØÅÁî®Êà∑‰ø°ÊÅØÁöÑÈ¢ëÈÅì„ÄÇ")
@app_commands.describe(channel="ÈÄâÊã©Ë¶ÅÂèëÈÄÅÊó•ÂøóÁöÑÊñáÊú¨È¢ëÈÅì")
@app_commands.checks.has_permissions(administrator=True)
async def set_log_channel(interaction: discord.Interaction, channel: discord.TextChannel):
    bot.log_channel_id = channel.id
    print(f"Log channel set to: #{channel.name} (ID: {channel.id}) by {interaction.user}")
    await interaction.response.send_message(f"‚úÖ ËÆ∞ÂΩïÈ¢ëÈÅìÂ∑≤ËÆæÁΩÆ‰∏∫ {channel.mention}„ÄÇ\n**ÊèêÁ§∫:** Ê≠§ËÆæÁΩÆÂú®Êú∫Âô®‰∫∫ÈáçÂêØÂêé‰ºö‰∏¢Â§±ÔºåÂª∫ËÆÆËÆæÁΩÆ `LOG_CHANNEL_ID` ÁéØÂ¢ÉÂèòÈáè„ÄÇ", ephemeral=True)

@set_log_channel.error
async def set_log_channel_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    if isinstance(error, app_commands.MissingPermissions):
        await interaction.response.send_message("‚ùå ‰Ω†Ê≤°ÊúâÁÆ°ÁêÜÂëòÊùÉÈôê„ÄÇ", ephemeral=True)
    else:
        print(f"Error in /setlogchannel: {error}")
        traceback.print_exc()
        await interaction.response.send_message("ËÆæÁΩÆËÆ∞ÂΩïÈ¢ëÈÅìÊó∂ÂèëÁîüÊú™Áü•ÈîôËØØ„ÄÇ", ephemeral=True)

# Check function for ticket category
def is_in_ticket_category():
    async def predicate(interaction: discord.Interaction) -> bool:
        if TICKET_CATEGORY_ID is None: return False
        # Check if channel exists and has a category attribute
        if interaction.channel and hasattr(interaction.channel, 'category_id'):
            return interaction.channel.category_id == TICKET_CATEGORY_ID
        return False # Not a channel with a category or channel doesn't exist
    return app_commands.check(predicate)

# Command: /verifyticket
@bot.tree.command(name="verifyticket", description="Á°ÆËÆ§ÂΩìÂâç Ticket Áî®Êà∑Ë∫´‰ªΩÂ∑≤È™åËØÅÔºåÂπ∂ËÆ∞ÂΩï‰ø°ÊÅØ„ÄÇ")
@is_in_ticket_category() # Check if command is used in the correct category
@app_commands.checks.has_role(SUPPORT_ROLE_ID) # Check if user has the support role
async def verify_ticket(interaction: discord.Interaction):
    channel_id = interaction.channel_id

    # 1. Check log channel
    if not bot.log_channel_id:
        await interaction.response.send_message("‚ùå **ÈîôËØØ:** Êú™ËÆæÁΩÆËÆ∞ÂΩïÈ¢ëÈÅì„ÄÇËØ∑ÁÆ°ÁêÜÂëò‰ΩøÁî® `/setlogchannel` ÂëΩ‰ª§„ÄÇ", ephemeral=True)
        return

    # 2. Retrieve data from cache
    data_to_log = ticket_data_cache.get(channel_id)
    if not data_to_log:
        await interaction.response.send_message("‚ùå **ÈîôËØØ:** Êú™ÊâæÂà∞Ê≠§ Ticket ÁöÑÂàùÂßã‰ø°ÊÅØ (ÂèØËÉΩÊú™Êèê‰∫§ÊàñÂ∑≤‰∏¢Â§±)„ÄÇ", ephemeral=True)
        return

    # 3. Get log channel object
    log_channel = bot.get_channel(bot.log_channel_id)
    if not log_channel or not isinstance(log_channel, discord.TextChannel):
        await interaction.response.send_message(f"‚ùå **ÈîôËØØ:** Êó†Ê≥ïÊâæÂà∞ÊúâÊïàÁöÑËÆ∞ÂΩïÈ¢ëÈÅì (ID: `{bot.log_channel_id}`)„ÄÇ", ephemeral=True)
        return

    # 4. Format log embed
    log_embed = discord.Embed(
        title=f"‚úÖ Ticket Â∑≤È™åËØÅ | Áî®Êà∑‰ø°ÊÅØËÆ∞ÂΩï",
        description=f"Ticket È¢ëÈÅì: {data_to_log.get('channel_mention', f'<#{channel_id}>')} (`{channel_id}`)",
        color=discord.Color.green(),
        timestamp=discord.utils.utcnow()
    )
    log_embed.add_field(name="È™åËØÅÂ§ÑÁêÜ‰∫∫", value=interaction.user.mention, inline=False)
    log_embed.add_field(name="Áî®Êà∑‰ø°ÊÅØ", value=f"{data_to_log['user_mention']} (`{data_to_log['user_id']}`)", inline=False)
    log_embed.add_field(name="Êèê‰∫§ÁöÑË∫´‰ªΩÊ†áËØÜ (ID/ÈìæÊé•)", value=data_to_log['identifier'], inline=False)
    log_embed.add_field(name="Êèê‰∫§ÁöÑÊù•ÊÑèËØ¥Êòé", value=data_to_log['reason'], inline=False)
    if data_to_log['kill_count'] != "N/A": log_embed.add_field(name="Êèê‰∫§ÁöÑÂ§ßËá¥ÂáªÊùÄÊï∞", value=data_to_log['kill_count'], inline=True)
    if data_to_log['notes'] != "Êó†": log_embed.add_field(name="Êèê‰∫§ÁöÑË°•ÂÖÖËØ¥Êòé", value=data_to_log['notes'], inline=False)
    log_embed.set_footer(text=f"ÂéüÂßãÊèê‰∫§Êó∂Èó¥: {data_to_log['submission_time'].strftime('%Y-%m-%d %H:%M:%S UTC')}")
    try: # Try to add user avatar
        user_obj = bot.get_user(data_to_log['user_id']) or await bot.fetch_user(data_to_log['user_id'])
        if user_obj: log_embed.set_thumbnail(url=user_obj.display_avatar.url)
    except Exception as avatar_error: print(f"Could not fetch avatar for user {data_to_log['user_id']}: {avatar_error}")

    # 5. Send log
    try:
        await log_channel.send(embed=log_embed)
        print(f"Logged verification for ticket {channel_id} to channel {bot.log_channel_id}")
    except discord.Forbidden: await interaction.response.send_message(f"‚ùå **ÈîôËØØ:** Êú∫Âô®‰∫∫Êó†ÊùÉÂêëËÆ∞ÂΩïÈ¢ëÈÅì {log_channel.mention} ÂèëÈÄÅÊ∂àÊÅØ„ÄÇ", ephemeral=True); return
    except Exception as e: print(f"Error sending log message: {e}"); traceback.print_exc(); await interaction.response.send_message(f"‚ùå **ÈîôËØØ:** ÂèëÈÄÅÊó•ÂøóÂà∞ËÆ∞ÂΩïÈ¢ëÈÅìÊó∂Âá∫Èîô„ÄÇ", ephemeral=True); return

    # 6. Send confirmation in ticket channel
    await interaction.response.send_message(f"‚úÖ **È™åËØÅÂÆåÊàêÔºÅ** {interaction.user.mention} Â∑≤Á°ÆËÆ§Ê≠§ Ticket ÁöÑÁî®Êà∑Ë∫´‰ªΩÔºåÁõ∏ÂÖ≥‰ø°ÊÅØÂ∑≤ËÆ∞ÂΩï„ÄÇ")

    # 7. Clean up cache
    if channel_id in ticket_data_cache:
        del ticket_data_cache[channel_id]
        print(f"Removed cached data for ticket channel {channel_id}")

@verify_ticket.error
async def verify_ticket_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
     if isinstance(error, app_commands.CheckFailure): await interaction.response.send_message("‚ùå Ê≠§ÂëΩ‰ª§Âè™ËÉΩÁî±ÊåáÂÆöÂÆ¢Êúç‰∫∫ÂëòÂú®ÊúâÊïàÁöÑ Ticket ÂàÜÁ±ªÈ¢ëÈÅì‰∏≠‰ΩøÁî®„ÄÇ", ephemeral=True)
     elif isinstance(error, app_commands.MissingRole): await interaction.response.send_message("‚ùå ‰Ω†Ê≤°ÊúâÊâÄÈúÄÁöÑÂÆ¢ÊúçËßíËâ≤Êù•‰ΩøÁî®Ê≠§ÂëΩ‰ª§„ÄÇ", ephemeral=True)
     else: print(f"Error in /verifyticket: {error}"); traceback.print_exc(); await interaction.response.send_message("Â§ÑÁêÜÈ™åËØÅÂëΩ‰ª§Êó∂ÂèëÁîüÊú™Áü•ÈîôËØØ„ÄÇ", ephemeral=True)

# --- Run the Bot ---
if __name__ == "__main__":
    # Check if all *required* IDs are loaded before starting
    if BOT_TOKEN and SUPPORT_ROLE_ID and TICKET_CATEGORY_ID and NEW_MEMBER_CATEGORY_ID:
        try:
            print("Attempting to run the bot...")
            bot.run(BOT_TOKEN)
        except discord.errors.LoginFailure: print("CRITICAL ERROR: Invalid Discord Bot Token provided.")
        except discord.errors.PrivilegedIntentsRequired: print("CRITICAL ERROR: Privileged Gateway Intents ('Members') are required but not enabled in the Discord Developer Portal.")
        except Exception as e: print(f"CRITICAL ERROR: Failed to start the bot - {e}"); traceback.print_exc()
    else:
        print("CRITICAL ERROR: Bot cannot start due to missing core configuration (Token, Role ID, Ticket Category ID, or New Member Category ID). Check environment variables.")